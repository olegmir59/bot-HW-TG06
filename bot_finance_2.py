import asyncio
import random

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram import Bot, Dispatcher, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import TELEGRAM_TOKEN
import sqlite3
import requests
import logging

bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()

logging.basicConfig(level=logging.INFO)

button_registr = KeyboardButton(text="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ")
button_exchange_rates = KeyboardButton(text="–ö—É—Ä—Å –≤–∞–ª—é—Ç")
button_tips = KeyboardButton(text="–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏")
button_finances = KeyboardButton(text="–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã")

keyboards = ReplyKeyboardMarkup(keyboard=[
    [button_registr, button_exchange_rates],
    [button_tips, button_finances]
], resize_keyboard=True)

conn = sqlite3.connect('user.db')
cursor = conn.cursor()

cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    telegram_id INTEGER UNIQUE,
    name TEXT,
    category1 TEXT,
    category2 TEXT,
    category3 TEXT,
    expenses1 REAL,
    expenses2 REAL,
    expenses3 REAL
)
''')

conn.commit()


class FinancesForm(StatesGroup):
    category1 = State()
    expenses1 = State()
    category2 = State()
    expenses2 = State()
    category3 = State()
    expenses3 = State()


@dp.message(Command('start'))
async def send_start(message: Message):
    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    with open("finance.png", "rb") as finance_image:
        image_bytes = BufferedInputFile(finance_image.read(), filename="finance.png")
        await bot.send_photo(chat_id=message.chat.id, photo=image_bytes)

    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫. –í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π –≤ –º–µ–Ω—é:",
                         reply_markup=keyboards)


@dp.message(F.text == "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ")
async def registration(message: Message):
    telegram_id = message.from_user.id
    name = message.from_user.full_name
    cursor.execute('''SELECT * FROM users WHERE telegram_id = ?''', (telegram_id,))
    user = cursor.fetchone()
    if user:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
    else:
        cursor.execute('''INSERT INTO users (telegram_id, name) VALUES (?, ?)''', (telegram_id, name))
        conn.commit()
        await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")


@dp.message(F.text == "–ö—É—Ä—Å –≤–∞–ª—é—Ç")
async def exchange_rates(message: Message):
    url = "https://v6.exchangerate-api.com/v6/09edf8b2bb246e1f801cbfba/latest/USD"
    try:
        response = requests.get(url)
        data = response.json()
        if response.status_code != 200:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –∫—É—Ä—Å–µ –≤–∞–ª—é—Ç!")
            return
        usd_to_rub = data['conversion_rates'].get('RUB', 'N/A')
        eur_to_usd = data['conversion_rates'].get('EUR', 'N/A')

        if isinstance(eur_to_usd, str) or isinstance(usd_to_rub, str):
            await message.answer("–î–∞–Ω–Ω—ã–µ –æ –≤–∞–ª—é—Ç–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            return

        euro_to_rub = round(eur_to_usd * usd_to_rub, 2)

        await message.answer(f"1 USD - {usd_to_rub:.2f} —Ä—É–±.\n"
                             f"1 EUR - {euro_to_rub:.2f} —Ä—É–±.")

    except requests.RequestException as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã: {e}")


@dp.message(F.text == "–°–æ–≤–µ—Ç—ã –ø–æ —ç–∫–æ–Ω–æ–º–∏–∏")
async def send_tips(message: Message):
    tips = [
        "–ò–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –≤ –¥—É—à–µ–≤–Ω–æ–µ —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ:‚úÖ –ö–∞–∂–¥—ã–π —Ä—É–±–ª—å, —Å—ç–∫–æ–Ω–æ–º–ª–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ–∫—É–ø–∫–µ –Ω–µ–Ω—É–∂–Ω—ã—Ö –≤–µ—â–µ–π, –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Å—á–∞—Å—Ç—å—é. –ò–ª–∏ —Ö–æ—Ç—è –±—ã —Å–Ω–∏–∂–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞!",
        "–≠–∫–æ–Ω–æ–º—å—Ç–µ –Ω–∞ —Ç–∞–∫—Å–∏:üòä –ò–Ω–æ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ –ø—Ä–æ–π—Ç–∏—Å—å –ø–µ—à–∫–æ–º ‚Äî –Ω–æ–≥–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è –∫—Ä–µ–ø—á–µ, –º–æ–∑–≥ —è—Å–Ω–µ–µ, –∞ –∫–æ—à–µ–ª–µ–∫ —Ç–æ–ª—â–µ!",
        "–ù–∞—É—á–∏—Ç–µ—Å—å –≥–æ—Ç–æ–≤–∏—Ç—å –¥–æ–º–∞:‚òëÔ∏è –ì–æ—Ç–æ–≤–∫–∞ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –±–ª—é–¥ —ç–∫–æ–Ω–æ–º–∏—Ç –¥–µ–Ω—å–≥–∏ –∏ –∑–¥–æ—Ä–æ–≤—å–µ. –ù—É –∏ –Ω–∏–∫—Ç–æ –Ω–µ –æ—Ç–º–µ–Ω—è–ª –∫—É–ª–∏–Ω–∞—Ä–Ω—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏!",
        "–ò—â–∏—Ç–µ —Å–∫–∏–¥–∫–∏, –∞–∫—Ü–∏–∏ –∏ –∫—ç—à–±—ç–∫:üéØ –û–¥–∏–Ω –∫–ª–∏–∫ –º–æ–∂–µ—Ç —Å—ç–∫–æ–Ω–æ–º–∏—Ç—å —Å–æ—Ç–Ω–∏ —Ä—É–±–ª–µ–π. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –≤–æ–≤—Ä–µ–º—è –ø–æ–π–º–∞—Ç—å –≤—ã–≥–æ–¥–Ω—É—é –∞–∫—Ü–∏—é!",
        "–ü–æ–∫—É–ø–∞–π—Ç–µ –≤–∫—É—Å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã:üçé –ü—Ä–æ–¥—É–∫—Ç—ã ‚Äî —ç—Ç–æ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ–∑–Ω—ã–µ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è, –Ω–æ –∏ —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–µ. –ü–æ–∫—É–ø–∞–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–æ, —á—Ç–æ –≤–∞–º –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ!",
        "–ü–æ–ª—å–∑—É–π—Ç–µ—Å—å —É—Å–ª—É–≥–∞–º–∏ —Å–æ–≤–º–µ—Å—Ç–Ω–æ:ü§ù –î–µ–ª–∏—Ç–µ –∞—Ä–µ–Ω–¥—É –∂–∏–ª—å—è, –º–∞—à–∏–Ω—É –∏–ª–∏ –µ–¥—É —Å –¥—Ä—É–∑—å—è–º–∏ ‚Äî —ç—Ç–æ –≤–µ—Å–µ–ª–æ –∏ –≤—ã–≥–æ–¥–Ω–æ!",
        "–û—Ç–ª–æ–∂–∏—Ç–µ –ø–æ–∫—É–ø–∫—É –Ω–∞ –∑–∞–≤—Ç—Ä–∞:üåç –ß–∞—Å—Ç–æ –∂–µ–ª–∞–Ω–∏–µ –∫—É–ø–∏—Ç—å –ø—Ä–æ—Ö–æ–¥–∏—Ç –±—ã—Å—Ç—Ä–µ–µ, —á–µ–º —Ä–µ–∫–ª–∞–º–∞ —É—Å–ø–µ–≤–∞–µ—Ç –∑–∞–≤–ª–∞–¥–µ—Ç—å –≤–∞–º–∏. –ó–∞–≤—Ç—Ä–∞ –º–∏—Ä –ø–æ–∫–∞–∂–µ—Ç—Å—è –¥—Ä—É–≥–∏–º‚Ä¶ –∏ –ø–æ–∫—É–ø–∫–∏ —Ç–æ–∂–µ!",
        "–ö—É–ø–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –æ–±—É–≤—å:üëü –•–æ—Ä–æ—à–∞—è –ø–∞—Ä–∞ –æ–±—É–≤–∏ –ø—Ä–æ—Å–ª—É–∂–∏—Ç –¥–æ–ª–≥–æ –∏ —Å–ø–∞—Å—ë—Ç –≤–∞—à–∏ –Ω–æ–≥–∏ –æ—Ç –º–æ–∑–æ–ª–µ–π, –Ω–µ—Ä–≤–æ–≤ –∏ –ª–∏—à–Ω–∏—Ö —Ç—Ä–∞—Ç!",
        "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —ç–Ω–µ—Ä–≥–æ—Å–±–µ—Ä–µ–≥–∞—é—â–∏–µ –ª–∞–º–ø–æ—á–∫–∏:üí° –û—Å–≤–µ—Ç–∏—Ç–µ –≤–∞—à—É –∂–∏–∑–Ω—å —è—Ä–∫–∏–º–∏ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏, –∞ –Ω–µ –≤—ã—Å–æ–∫–∏–º–∏ —Å—á–µ—Ç–∞–º–∏ –∑–∞ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤–æ!",
        "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –∫—Ä—É–ø–Ω—ã–µ –ø–æ–∫—É–ø–∫–∏ –∑–∞—Ä–∞–Ω–µ–µ:üìÜ –õ—É—á—à–µ –∫–æ–ø–∏—Ç—å –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ, —á–µ–º –≤–ª–µ–∑—Ç—å –≤ –¥–æ–ª–≥–∏ –≤–Ω–µ–∑–∞–ø–Ω–æ!",
        "–ó–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–≤–æ–µ–π —Ç–µ—Ö–Ω–∏–∫–µ:üõ†Ô∏è –†–µ–º–æ–Ω—Ç –Ω–æ—É—Ç–±—É–∫–∞ –æ–±—Ö–æ–¥–∏—Ç—Å—è –¥–µ—à–µ–≤–ª–µ –∑–∞–º–µ–Ω—ã, –∞ —á–∞–π –ø—Ä–æ–ª–∏–≤–∞—Ç—å –ª–µ–≥—á–µ, —á–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã!",
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ—â–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ:üî• –°—Ç–∞—Ä—É—é —Ñ—É—Ç–±–æ–ª–∫—É –º–æ–∂–Ω–æ –ø—Ä–µ–≤—Ä–∞—Ç–∏—Ç—å –≤ —Ç—Ä—è–ø–æ—á–∫—É, –∞ –ø–ª–∞—Å—Ç–∏–∫–æ–≤—É—é –±—É—Ç—ã–ª–∫—É ‚Äî –≤ –∫–∞—à–ø–æ. –¢–∞–∫ –≤—ã —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –æ—Ç—Ö–æ–¥—ã –∏ –Ω–∞–π–¥–µ—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ!",
        "–ë—É–¥—å—Ç–µ —Å–∫—Ä–æ–º–Ω–µ–µ –≤ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è—Ö:üé≠ –ü–æ—Å–µ—â–µ–Ω–∏–µ –∫–∏–Ω–æ—Ç–µ–∞—Ç—Ä–∞ –∏–ª–∏ –∫–∞—Ñ–µ ‚Äî —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –¥–æ—Ä–æ–≥–æ—Å—Ç–æ—è—â–µ–µ. –î—Ä—É–∑—å—è, —Ö–æ—Ä–æ—à–∞—è –∫–Ω–∏–≥–∞ –∏ —É—é—Ç–Ω—ã–π –≤–µ—á–µ—Ä –¥–æ–º–∞ —Å–¥–µ–ª–∞—é—Ç –≤–∞—Å —Å—á–∞—Å—Ç–ª–∏–≤–µ–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ!"
        "–í–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –±—é–¥–∂–µ—Ç –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã.",
        "–û—Ç–∫–ª–∞–¥—ã–≤–∞–π—Ç–µ —á–∞—Å—Ç—å –¥–æ—Ö–æ–¥–∞ –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.",
        "–ü–æ–∫—É–ø–∞–π—Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è –∏ –æ–¥–µ–∂–¥—É –ø–æ –∞–∫—Ü–∏–æ–Ω–Ω—ã–º —Ü–µ–Ω–∞–º."
    ]
    await message.answer(random.choice(tips))


@dp.message(F.text == "–õ–∏—á–Ω—ã–µ —Ñ–∏–Ω–∞–Ω—Å—ã")
async def finances(message: Message, state: FSMContext):
    await state.set_state(FinancesForm.category1)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")


@dp.message(FinancesForm.category1)
async def finances_category1(message: Message, state: FSMContext):
    await state.update_data(category1=message.text)
    await state.set_state(FinancesForm.expenses1)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")


@dp.message(FinancesForm.expenses1)
async def finances_expenses1(message: Message, state: FSMContext):
    await state.update_data(expenses1=float(message.text))
    await state.set_state(FinancesForm.category2)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")


@dp.message(FinancesForm.category2)
async def finances_category2(message: Message, state: FSMContext):
    await state.update_data(category2=message.text)
    await state.set_state(FinancesForm.expenses2)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è –≤—Ç–æ—Ä–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")


@dp.message(FinancesForm.expenses2)
async def finances_expenses2(message: Message, state: FSMContext):
    await state.update_data(expenses2=float(message.text))
    await state.set_state(FinancesForm.category3)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ—Ç—å—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤:")


@dp.message(FinancesForm.category3)
async def finances_category3(message: Message, state: FSMContext):
    await state.update_data(category3=message.text)
    await state.set_state(FinancesForm.expenses3)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–æ–≤ –¥–ª—è —Ç—Ä–µ—Ç—å–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")


@dp.message(FinancesForm.expenses3)
async def finances_expenses3(message: Message, state: FSMContext):
    await state.update_data(expenses3=float(message.text))
    data = await state.get_data()
    await state.clear()
    await message.answer("–†–∞—Å—Ö–æ–¥—ã –≤–≤–µ–¥–µ–Ω—ã –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")


async def main():
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())